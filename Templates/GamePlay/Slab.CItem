Slab.Mesh = "pCubeShape11"
Slab.Pack = "plyta.dat"
Slab.Mass = 100
Slab.NeverOpen = false
Slab.BaseObj = "CItem"
Slab.Closed = false
Slab.Pinned = true
Slab._endLevelAfterOpen = false
Slab._showCnt = false
Slab.SoundWhenCleared = "misc/Area_Cleared"
Slab.IsAntiPortal = false
Slab.Portals = {}
o.Health = 0
o.Immortal = true
Slab.Appearance = "Slab"
Slab.Actions.OnOpen = {}
Slab.Actions.OnClose = {}
Slab.s_Editor["Actions.OnOpen.[new]"]   = { "TextEdit" }
Slab.s_Editor["Actions.OnClose.[new]"]   = { "TextEdit" }
Slab.s_Editor["Portals.[new]"] = { "ComboBox", "Templates['Slab.CItem'].FillPortals" }
Slab.s_Editor.Appearance = { "ComboBox", "Templates['Slab.CItem'].FillAppearance" }
Slab.s_SubClass.types = {
    Slab = {
        mesh = "pCubeShape11",
        pack = "plyta.dat",
    },
    Fence = {
        mesh = "polySurfaceShape205",
        pack = "slab_paliki.dat",
    },
    Babel_Arab = {
        mesh = "pCubeShape1",
        pack = "slab_arabski_babel.dat",
    },
    Asylum_Monast = {
        mesh = "pCubeShape2",
        pack = "slab_asylum_opactwo.dat",
    },
    Chaos = {
        mesh = "pCubeShape7",
        pack = "slab_chaos.dat",
    },
    Docks_Base = {
        mesh = "slabik_atestShape",
        pack = "slab_doki_baza.dat",
    },
    Factory_Bridge = {
        mesh = "polySurfaceShape17047",
        pack = "slab_factory_most.dat",
    },
    Catacombs = {
        mesh = "pCubeShape8",
        pack = "slab_katakumby.dat",
    },
    Opera = {
        mesh = "pCubeShape3",
        pack = "slab_opera.dat",
    },
    Prison = {
        mesh = "pCubeShape4",
        pack = "slab_prison.dat",
    },
    TrainStation = {
        mesh = "pCubeShape5",
        pack = "slab_trainstation.dat",
    },
    CityOnWater = {
        mesh = "pCubeShape6",
        pack = "slab_wenecja.dat",
    },
}

function Slab:FillPortals()
    tmp_tab = WORLD.EnumeratePortals()
    table.insert(tmp_tab,1,"-remove-")    
end

function Slab:FillAppearance()
    tmp_tab = {"Slab","Fence","Babel_Arab","Asylum_Monast","Chaos","Docks_Base","Factory_Bridge","Catacombs","Opera","Prison","TrainStation","CityOnWater"}
end

function Slab:EditOnChangePosition()
    self.StartPos = Clone(self.Pos)
end

function Slab:PreApply()
    self.Mesh = self.s_SubClass.types[self.Appearance].mesh
    self.Pack = self.s_SubClass.types[self.Appearance].pack
end

function Slab:OnUpdate()
    if not self._IsOpened and self._OpenAfterDeadBodies and Game.BodyCountTotal >= self._OpenAfterDeadBodies then
        self.cnt = self.cnt - 1
        if self.cnt<0 then
            self:Open()
            if self._showCnt then
                self._showCnt = nil
                --Hud._slabCnt = nil
                PlaySound2D(self.SoundWhenCleared)
            end
            if self._endLevelAfterOpen then
                GObjects:Add(TempObjName(),CloneTemplate("EndLevel.CProcess"))
            end
        end
	else
        self.cnt = 45
    end
end

function Slab:OnCreateEntity()
    self:PO_Create(BodyTypes.FromMesh,nil,ECollisionGroups.Fixed)
    ENTITY.PO_SetMovedByExplosions(self._Entity,false)

    if self._AntiPortalName then 
        WORLD.DeleteAntiPortal(self._AntiPortalName) 
        self._AntiPortalName = nil
    end
    
    if self.IsAntiPortal then    
        self._AntiPortalName = WORLD.CreateEnabledAntiPortalFromClosedConvexMesh(self._Entity)
    end
    self:EditOnChangePosition()
    
    -- autoconversion to new format
    if self.Portal and self.Portal ~= "" then 
        table.insert(self.Portals,self.Portal) 
    end
    self._RespawnPos = Clone(self.Pos)
    self.Portal = nil
end

function Slab:OnRelease()
    if self._AntiPortalName then 
        WORLD.DeleteAntiPortal(self._AntiPortalName) 
        self._AntiPortalName = nil
    end
end

function Slab:EnableAntiPortal(enable)
    if not self._AntiPortalName then return end
    WORLD.EnableAntiPortal(self._AntiPortalName,enable)
end

function Slab:Close(cnt, showCnt, endLevel) 
    --Game:Print("close")
    self._OpenAfterDeadBodies =  Game.BodyCountTotal + cnt
    self._endLevelAfterOpen = endLevel
	self._showCnt = showCnt
    
    if not self._IsOpened then return end        
    if self._proc then GObjects:ToKill(self._proc)  end
    
    self:LaunchAction(self.Actions.OnClose)

    local w,h,d = ENTITY.GetDimensions(self._Entity)
    self.Pos.Y = self.StartPos.Y - h
    ENTITY.SetPosition(self._Entity,self.Pos.X,self.Pos.Y,self.Pos.Z)
        
    -- scroll
    self._proc = GObjects:Add(TempObjName(),PScroll:New(self,h,25))    
    self._IsOpened = nil
end

function Slab:Open(now)
    if self.NeverOpen then return end
    for i,o in self.Portals do
        if not now then
            WORLD.EnablePortal(o,true)
        end
    end
    self:EnableAntiPortal(false)
    --Game:Print("open")
    if self._IsOpened then return end
    if self._proc then GObjects:ToKill(self._proc)  end
    
    self:LaunchAction(self.Actions.OnOpen)
       
    self.Pos.Y = self.StartPos.Y
    local w,h,d = ENTITY.GetDimensions(self._Entity)
    if now then self.Pos.Y = self.StartPos.Y - h end            
    ENTITY.SetPosition(self._Entity,self.Pos.X,self.Pos.Y,self.Pos.Z)

    if not now then     
        self._proc = GObjects:Add(TempObjName(),PScroll:New(self,-h,25,true))       
    else
        ENTITY.EnableDraw(self._Entity, false)
        ENTITY.PO_Enable(self._Entity, false)
    end
    
    self._IsOpened = true    
    self._OpenAfterDeadBodies = nil
end

function Slab:OnPlay(firstTime)
    if firstTime then
        if not self.Closed then 
            self:Open(true) 
        else 
            for i,p in self.Portals do
                WORLD.EnablePortal(p,false)
            end
        end
    end
end


function Slab:RestoreFromSave()
    if self.IsAntiPortal then    
        if self._RespawnPos then
            self._RespawnPos:ToEntity(self._Entity)
        end
        self._AntiPortalName = WORLD.CreateEnabledAntiPortalFromClosedConvexMesh(self._Entity)
        self.Pos:ToEntity(self._Entity)
    end
end

--============================================================================
-- SCROLLING
--============================================================================
PScroll = {    
    Obj = nil,
    Offset = 100,
    Speed = 0.1,
    Hide = false,
}
Inherit(PScroll,CProcess)
--============================================================================
function PScroll:New(obj,offset,speed,hide)
    local p = Clone(PScroll)
    p.BaseObj = "PScroll"
    p.Obj = obj
    p.Offset = offset
    if offset < 0 then speed = -speed end
    p.Speed = speed
    p._StartPos = obj.Pos.Y
    p.Hide = hide
    p:AddTimer("FX",0.15)    
    PlaySound3D("doors/door-stone"..math.random(1,2),obj.Pos.X,obj.Pos.Y,obj.Pos.Z,15)     
    return p
end
--============================================================================
function PScroll:Tick(delta)
    delta = delta / INP.GetTimeMultiplier()
    if self._ToKill then return end    
    
    ENTITY.EnableDraw(self.Obj._Entity, true)
    ENTITY.PO_Enable(self.Obj._Entity, true)
    
    local a = 1 - math.abs(self._StartPos -  self.Obj.Pos.Y) / math.abs(self.Offset)
    if a < 0.1 then a = 0.1 end
    
    self.Obj.Pos.Y = self.Obj.Pos.Y + delta * self.Speed * a
    
    if (self.Speed < 0 and self.Obj.Pos.Y < self._StartPos + self.Offset) or
       (self.Speed > 0 and self.Obj.Pos.Y > self._StartPos + self.Offset) then       
       
       self.Obj.Pos.Y = self._StartPos + self.Offset             
       ENTITY.EnableDraw(self.Obj._Entity, not self.Hide)
       ENTITY.PO_Enable(self.Obj._Entity, not self.Hide)
       if not self.Hide then
         self.Obj:EnableAntiPortal(true)
         for i,p in self.Obj.Portals do
           WORLD.EnablePortal(p,false)
         end
       end
       GObjects:ToKill(self)
       Game._EarthQuakeProc:Add(self.Obj.Pos.X,self.Obj.Pos.Y,self.Obj.Pos.Z, 30, 10, 0.2, 0.2, false)
    end
    
    ENTITY.SetPosition(self.Obj._Entity,self.Obj.Pos.X,self.Obj.Pos.Y,self.Obj.Pos.Z)
    ENTITY.PO_Activate(self.Obj._Entity,true)
end
--============================================================================
function PScroll:FX()
    local v = Vector:New(self.Obj.Pos)
    local w,h,d = ENTITY.GetDimensions(self.Obj._Entity)
    v.Y = self._StartPos - h/2 + 0.6
    if self.Speed>0 then v.Y = v.Y + self.Offset end
    AddPFX('butbig',0.5,v)
end
--============================================================================
